React Learning: 
===============

JSX should have one parent element. 

Property binding : <Person name="Winkey" age="24"/> 							Read using : Props (function based comp) or this.name in class based comp

Eq to ng-content :  <Person name="Winkey" age="24">Let's rock buddy</Person>	Read using : props.children

If we want to use any kind of static html , we can use props.children


Props
======
props  allow you to pass data from a parent (wrapping) component to a child (embedded) component.
<div>
            <Post title="My first Post" />
        </div>
State
======
*	state is the property only accessible by class extends Component from React.
*	Changing properties in state will lead react to re-render the application.

*** State cannot be changed directly. React offers spl method. ** this.setState({newObject})

State in Function based Component
=================================

*	UseState from react is used
*	It returns An array with 2 elements in it. 
*	One returns current state of the component
*	Second returns function to change the state.
*	The set***state method in UseState replaces the entire object ( it's not merging like this.setState())
*	So when we have more then one object in UseState , we need to manually merge them. 
							( or )
* Multiple UseState() calls are allowed

StateFull vs Stateless component
================================

* Components that manages state with setState or useState are stateFull components
* Components that doesn't have any state are stateless or Dump or Presentational components.

======================================================================================================

Events :
=========

https://reactjs.org/docs/events.html
====================================================================================

When I want to pass a FUNCTION to a component from parent(HTML) to child I should use bind(...)

 <Person name="Winkey" age="24" onClick={this.switchName.bind(...)}/>
 
		Or
We can use an anonymous arrow function, but this is inefficiant .bind(...) is recommanded 
 <Person name="Winkey" age="24" onClick={()=>this.switchName(...)}/>


======================
CSS
===
Css is imported into js to bring it into the game

Inline Style
============
Inline style can be applied using style property of the component

const styleObj = {
    backgroundColor : #ccc,
    cursor : "pointer"
}
<Person style={styleObj} ... />

Dynamic Content in JSX
======================

JSX will allow ternary operator.
        {
          this.state.showPerson ? 
          <div>
            <Person name={this.state.person[0].name} age={this.state.person[0].age} >Let's rock buddy</Person>
          </div>
          : null
        }

But keeping your condition inside the JSX is not a good idea.

React - Component Life Cycle 
============================
create
=======

LifeCycle                            || Desc                      || Do's                     || Don'ts  
==========                              =====                       ======                       =======
constructor(props)                   || should call super(props)  || Set up state             || Side Effects

getDerivedStateFromProps(props,state)||                           || Sync state               || Side Effects

render()                             || Prepare and structure jSX ||                        

Render child components              || 

componentDidMount()                  || Component Get created     ||  Side Effects            || Updating state , This cause the re-render

componentWillMount()                 || Legacy Hook

Update for props changes
========================

getDerivedStateFromProps(props,state)||                           || Sync state               || Side Effects

shouldComponentUpdate(nextProps      || we can stop the render    || Decide continue or not   || Side Effects
                      nextState)        process if needed         

render()

Update child component props

getSnapshotBeforeUpdate(prevProps,  ||                            || Last min DOM options      || Side Effects
                        prevState)

componentDidUpdate()                ||                            || Side Effects              || State changes

componentWillReceiveProps()         || Legacy

componentWillUpdate()               || Legacy

Update for state changes
=========================

componentwillunmount
====================
  * similar to ngDestroy
  * Will get called once the component get destroyed
In functional component
=======================

useEffect()
===========

  * Not a life cycle method,
  * But it is a combination of componentDidMount() and componentDidUpdate()
  * Execute on every change in state
  * we can have multiple useEffect as per our choise

  useEffect(()=>{
    //logic goes here
    return ()=>{
      //code that should run when component get destroyed
    }
  },[]); // No dependency.. run only once when component gets created

useEffect(()=>{
    //logic goes here
    return ()=>{
      //code that should run when component get destroyed
    }
  },[props.person,....]);// Run whenever dependencies changes


  shouldComponentUpdate vs React.memo(Person)
  ===========================================

  shouldComponentUpdate --> is used in class based component and used for optimization and avoid unnecessary re-rendering

  React.memo(...) on other hand work in functional component and only re-render when input changes

  PureComponent
  ==============
  * PureComponent is an extended version of Component
  * Instead of using shouldComponentUpdate with every props check in it,
     PureComponent internally does it.